/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

plugins {
    id 'org.openjdk.skara.gradle.proxy'
    id 'org.openjdk.skara.gradle.version'
    id 'org.openjdk.skara.gradle.reproduce'
}

def JAVA_HOMES = [
    "LinuxX64": ".jdk/openjdk-13.0.1_linux-x64_bin/jdk-13.0.1",
    "MacosX64": ".jdk/openjdk-13.0.1_osx-x64_bin/jdk-13.0.1.jdk/Contents/Home",
    "WindowsX64": ".jdk/openjdk-13.0.1_windows-x64_bin"
]

configure(subprojects.findAll() { it.name != 'bots' }) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.openjdk.skara.gradle.module'
    apply plugin: 'org.openjdk.skara.gradle.version'

    group = 'org.openjdk.skara'
    sourceCompatibility = 13
    targetCompatibility = 13

    repositories {
        mavenLocal()
        maven {
            url System.getProperty('maven.url', 'https://repo.maven.apache.org/maven2/')
        }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
        // Force Gradle to load the JUnit Platform Launcher from the module-path, as
        // configured in buildSrc/.../ModulePlugin.java -- see SKARA-69 for details.
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.5.2'
    }

    compileJava {
        gradle.taskGraph.whenReady { graph ->
            if (!graph.hasTask(":offline")) {
                dependsOn project(":").getTasksByName("download" + getOSAndCPU() + "JDK", false)
                options.forkOptions.javaHome = file(project.rootDir.toString() + "/" + JAVA_HOMES[getOSAndCPU()])
                options.compilerArgs += ['--release', '13']
                options.fork = true
                options.sourcepath = files(sourceSets.main.java.srcDirs)
            }
        }
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        gradle.taskGraph.whenReady { graph ->
            if (!graph.hasTask(":offline")) {
                dependsOn project(":").getTasksByName("download" + getOSAndCPU() + "JDK", false)
                options.forkOptions.javaHome = file(project.rootDir.toString() + "/" + JAVA_HOMES[getOSAndCPU()])
                options.compilerArgs += ['--release', '13']
                options.fork = true
            }
        }
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()

        if (findProperty('credentials')) {
            systemProperty "credentials", findProperty('credentials')
        }

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }

        gradle.taskGraph.whenReady { graph ->
            if (!graph.hasTask(":offline")) {
                dependsOn project(":").getTasksByName("download" + getOSAndCPU() + "JDK", false)
                executable = file(project.rootDir.toString() + "/" + JAVA_HOMES[getOSAndCPU()] + "/bin/java" + (getOS() == "windows" ? ".exe" : ""))
            }
        }
    }

    publishing {
        repositories {
            maven {
                url = findProperty('mavenRepositoryUrl')
                credentials {
                    username = findProperty('mavenRepositoryUser')
                    password = findProperty('mavenRepositoryPassword')
                }
            }
        }
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(publish) && !findProperty('mavenRepositoryUrl')) {
            throw new GradleException("To publish artifacts, set the maven repository url -PmavenRepositoryUrl=<url>")
        }
        if (graph.hasTask(publish) && !findProperty('mavenRepositoryUser')) {
            throw new GradleException("To publish artifacts, set the maven repository user name -PmavenRepositoryUser=<user>")
        }
        if (graph.hasTask(publish) && !findProperty('mavenRepositoryPassword')) {
            throw new GradleException("To publish artifacts, set the maven repository password -PmavenRepositoryPassword=<password>")
        }
    }
}

task test {
    subprojects.findAll() { !it.getTasksByName('test', false).isEmpty() }.each { dependsOn "${it.path}:test" }
}

task clean {
    subprojects.findAll() { !it.getTasksByName('clean', false).isEmpty() }.each { dependsOn "${it.path}:clean" }
}

reproduce {
    dockerfile = 'test.dockerfile'
}

def getOS() {
    def os = System.getProperty('os.name').toLowerCase()
    if (os.startsWith('linux')) {
        return 'linux'
    }
    if (os.startsWith('mac')) {
        return 'macos'
    }
    if (os.startsWith('win')) {
        return 'windows'
    }
    if (os.startsWith('sunos')) {
        return 'solaris'
    }
    throw new GradleException("Unexpected operating system: " + os)
}

def getCPU() {
    def cpu = System.getProperty('os.arch').toLowerCase()
    if (cpu.startsWith('amd64') || cpu.startsWith('x86_64') || cpu.startsWith('x64')) {
        return 'x64'
    }
    if (cpu.startsWith('x86') || cpu.startsWith('i386')) {
        return 'x86'
    }
    if (cpu.startsWith('sparc')) {
        return 'sparc'
    }
    if (cpu.startsWith('ppc')) {
        return 'ppc'
    }
    if (cpu.startsWith('arm')) {
        return 'arm'
    }
    if (cpu.startsWith('aarch64')) {
        return 'aarch64';
    }
    throw new GradleException("Unexpected CPU: " + cpu)
}

def getOSAndCPU() {
    return combineOSAndCPU(getOS(), getCPU())
}

def combineOSAndCPU(os, cpu) {
    return os.substring(0, 1).toUpperCase() + os.substring(1) +
           cpu.substring(0, 1).toUpperCase() + cpu.substring(1)
}

task local(type: Copy) {
    doFirst {
        delete project.buildDir
    }

    def os = getOS()
    def cpu = getCPU()

    if (os in ['linux', 'macos', 'windows'] && cpu == 'x64') {
        dependsOn ':cli:image' + combineOSAndCPU(os, cpu)
    } else {
        dependsOn ':cli:imageLocal'
    }

    from zipTree(file(project.rootDir.toString() +
                      '/cli/build/distributions/cli' +
                      '-' + project.version + '-' +
                      os + '-' + cpu + '.zip'))
    into project.buildDir
}

task offline(type: Copy) {
    doFirst {
        delete project.buildDir
    }

    def os = getOS()
    def cpu = getCPU()

    dependsOn ':cli:imageLocal'
    from zipTree(file(project.rootDir.toString() +
                      '/cli/build/distributions/cli' +
                      '-' + project.version + '-' +
                      os + '-' + cpu + '.zip'))
    into project.buildDir
}

defaultTasks 'local'
